
#
# Snippets
#

'.text':
	'Shell Pragma':
		'prefix': '#!'
		'body': '#!/usr/bin/env ${1:bash}'

'.text.html':
	'Vanilla Document':
		'prefix': '@vanilla'
		'body': """
			<!DOCTYPE html>
			<html lang="en">
			<head>
				<title>${1:Untitled}</title>
				<meta charset="utf-8"/>
				<meta name="description" content="" />
				<meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0" />

				<link rel="shortcut icon" type="image/ico" href="favicon.png" />
				<link rel="stylesheet" media="screen, projection" href="css/styles.css" />

				<!--[if lt IE 9]>
					<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
				<![endif]-->
			</head>
			<body>
				${0}
			</body>
			</html>
		"""

'.source.gitignore':
	'Vanilla':
		'prefix': '@vanilla'
		'body': """
			# Ignore npm/yarn scraps
			node_modules/
			npm-debug.log
			yarn.lock
			yarn-debug.log
			yarn-error.log
		"""

'.source.css':
	'font smoothing':
		'prefix': '@font-smoothing'
		'body': """
			-webkit-font-smoothing: antialiased;
			-moz-osx-font-smoothing: grayscale;
		"""
	'font face':
		'prefix': '@fontface'
		'body': """
			@font-face {
			  font-family: '${1}';
			  src: url('${2}.woff') format('woff'),
			       url('${2}.ttf') format('truetype'),
						 url('${2}.svg#font') format('svg');
			}
		"""
	'Comment':
		'prefix': '@comment'
		'body': """
/**
 * ${0}
 */
		"""
	'Font Family: San Francisco':
		'prefix': '@san-francisco'
		'body': '-apple-system, BlinkMacSystemFont'
	'Font Stack: System':
		'prefix': '@system'
		'body': '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif'
	'Ease: Exponential Out':
		'prefix': '@ease:expo-out'
		'body': """
			cubic-bezier(0.190, 1.000, 0.220, 1.000)
		"""
	'Ease: Quartic Out':
		'prefix': '@ease:quart-out'
		'body': """
			cubic-bezier(0.165, 0.840, 0.440, 1.000)
		"""
	'Ease: Quintic Out':
		'prefix': '@ease:quint-out'
		'body': """
			cubic-bezier(0.230, 1.000, 0.320, 1.000)
		"""

'.source.css.scss':
	'@import':
	    'prefix': 'import'
	    'body': '@import \'$0\';'

'.source.js':
	'If':
		'prefix': 'if'
		'body': """
			if (${1}) {
				${0}
			}
		"""

	'If Else':
		'prefix': 'ife'
		'body': """
			if (${1:true}) {
				${2}
			} else {
				${0}
			}
		"""

	'Switch':
		'prefix': 'switch'
		'body': """
			switch (${1:expression}) {
				case ${2:expression}:
					${3}
					break;
			}
		"""

	'Case':
		'prefix': 'case'
		'body': """
			case ${1:expression}:
				${2}
				break;
		"""

	'console.log':
		'prefix': 'log'
		'body': 'console.log(${1});${0}'

	'console.warn':
		'prefix': 'warn'
		'body': 'console.warn(${1});${0}'

	'Function':
		'prefix': 'fn'
		'body': """
			function ${1} (${2}) {
				${0}
			}
		"""

	'Anonymous Function':
		'prefix': 'f'
		'body': """
			function (${1}) {
				${0}
			}
		"""

	'Comment':
		'prefix': '@comment'
		'body': """
			/**
			 * ${0}
			 */
		"""

	'For Loop':
		'prefix': 'for'
		'body': """
			for (${1}) {
				${2}
			}
		"""

	'Import':
		'prefix': 'import'
		'body': """
			import ${1} from '${2}';
		"""

	'Flow':
		'prefix': '@flow'
		'body': '// @flow'

	'Template: Node Main Script':
		'prefix': '@main'
		'body': """
			async function main () {
				${0}
			}

			main().catch(err => {
				console.error(err);
				process.exit(1);
			})
		"""

	'Utils: Combine':
		'prefix': '@combine'
		'body': """
			const combine = (...arrays) => [].concat(...arrays);
		"""

	'Utils: Compact':
		'prefix': '@compact'
		'body': """
			const compact = arr => arr.filter(Boolean)
		"""

	'Utils: Contains':
		'prefix': '@contains'
		'body': """
			const contains = (() => Array.prototype.includes
				? (arr, value) => arr.includes(value)
				: (arr, value) => arr.some(el => el === value)
			)()
		"""

	'Utils: Difference':
		'prefix': '@difference'
		'body': """
			const difference = (arr, ...others) => {
				let combined = [].concat(...others)
				return arr.filter(el => !combined.some(exclude => el === exclude))
			}
		"""

	'Utils: Extend':
		'prefix': '@extend'
		'body': """
		  const extend = Object.assign ? Object.assign : (target, ...sources) => {
		    sources.forEach(source =>
		      Object.keys(source).forEach(prop => target[prop] = source[prop])
		    )
		    return target
		  }
		"""

	'Utils: First':
		'prefix': '@first'
		'body': """
			const first = arr => arr[0]
		"""

	'Utils: Initial':
		'prefix': '@initial'
		'body': """
			const initial = arr => arr.slice(0, -1)
		"""

	'Utils: Intersection':
		'prefix': '@intersection'
		'body': """
			const intersection = (...arrays) => {
				return union(...arrays).filter(toFind =>
					arrays.every(arr => arr.some(el => el === toFind))
				)
			}
		"""

	'Utils: Merge':
		'prefix': '@merge'
		'body': """
			const merge = (...objects) => extend({}, ...objects)
 		"""

	'Utils: Union':
		'prefix': '@union'
		'body': """
			const union = (...arrays) => unique(combine(...arrays))
 		"""

	'Utils: Unique':
		'prefix': '@unique'
		'body': """
			const unique = arr => [...Set(arr)]
		"""

	'Utils: Minimum':
		'prefix': '@min'
		'body': """
			const min = arr => Math.min(...arr)
		"""

	'Utils: Maximum':
		'prefix': '@max'
		'body': """
			const max = arr => Math.max(...arr)
		"""

'.source.jsx':
	'React: Import':
		'prefix': '@ri'
		'body': """
			import React from 'react';
		"""

	'React: Class':
		'prefix': '@rc'
		'body': """
			class ${1:ComponentName} extends Component {
				render () {
					return (
						<${2:div} />
					);
				}
			}
		"""

	'React: Arrow Function':
		'prefix': '@ra'
		'body': """
			const ${1:ComponentName} = (props) => (
				<${2:div} />
			);
		"""

	'React: Function':
		'prefix': '@rf'
		'body': """
			function ${1:ComponentName} (props) {
				return (
					<${2:div} />
				);
			}
		"""

'.source.makefile':
	'Vanilla Makefile':
		'prefix': '@vanilla'
		'body': """

#
# Binaries
#

BIN := ./node_modules/.bin

#
# Variables
#

PORT = 8080

#
# Tasks
#

build:
	@true

watch: install
	@serve --port \$(PORT)

clean:
	@rm -rf build
clean-deps:
	@rm -rf node_modules

#
# Shorthands
#

install: node_modules

#
# Targets
#

node_modules: package.json
	@npm install

#
# Phony
#

.PHONY: watch clean clean-deps

		"""

	'Deploy (Github Pages)':
		'prefix': '@deploy'
		'body': """
			REPO    = rosszurowski/${1:repo}
			DOMAIN  = rosszurowski.github.io/${1:repo}
			BRANCH  = $(shell git rev-parse --abbrev-ref HEAD)

			deploy:
				@echo "Deploying branch \\033[0;33m$(BRANCH)\\033[0m to Github pages..."
				@make clean
				@NODE_ENV=production make build
				@(cd $(BUILD) && \
					git init -q . && \
					git add . && \
					git commit -q -m "Deployment (auto-commit)" && \
					echo "\\033[0;90m" && \
					git push "git@github.com:$(REPO).git" HEAD:gh-pages --force && \
					echo "\\033[0m")
				@make clean
				@echo "Deployed to \\033[0;32mhttp://$(DOMAIN)/\\033[0m"
		"""

'.text.html.vue':
	'Vanilla Vue File':
		'prefix': '@vanilla'
		'body': """
<template>
</template>

<script>

export default {
	name: '${1:ComponentName}',

	data () {
		return {}
	}
}

</script>
			"""
